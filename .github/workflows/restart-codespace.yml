name: Restart Codespace
on:
  repository_dispatch:
    types: [restart-codespace]
jobs:
  restart:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI and SSH Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gh openssh-client netcat-traditional
          echo "GitHub CLI version:"
          gh --version
          echo "Netcat version:"
          nc -h 2>&1 | head -n 1
      - name: Authenticate GitHub CLI
        run: |
          echo "Authenticating with PAT..."
          echo "${{ secrets.CODESPACE_PAT }}" | gh auth login --with-token
          gh auth status
      - name: Set Up SSH Keys
        run: |
          echo "Generating SSH key for GitHub CLI..."
          mkdir -p ~/.ssh
          ssh-keygen -t ed25519 -C "github-actions@gofly" -f ~/.ssh/id_ed25519 -N "" || { echo "SSH key generation failed"; exit 1; }
          echo "Adding SSH key to GitHub..."
          gh ssh-key add ~/.ssh/id_ed25519.pub --title "GitHub Actions SSH Key" --type authentication || { echo "Failed to add SSH key"; exit 1; }
          echo "Configuring SSH..."
          echo "Host github.com" >> ~/.ssh/config
          echo "  HostName github.com" >> ~/.ssh/config
          echo "  User git" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
          chmod 600 ~/.ssh/id_ed25519
          chmod 644 ~/.ssh/id_ed25519.pub
          echo "SSH key setup complete."
      - name: Restart Codespace
        env:
          CODESPACE_NAME: ${{ github.event.client_payload.codespace_name }}
        run: |
          echo "Waiting 120 seconds to ensure stop completes..."
          sleep 120
          echo "Attempting to restart Codespace $CODESPACE_NAME..."
          RETRY_COUNT=0
          MAX_RETRIES=3
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            START_OUTPUT=$(gh api -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              /user/codespaces/$CODESPACE_NAME/start 2>&1)
            START_STATUS=$?
            if [ $START_STATUS -eq 0 ]; then
              echo "Codespace $CODESPACE_NAME restart initiated successfully."
              exit 0
            fi
            echo "Failed to restart Codespace $CODESPACE_NAME (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)."
            echo "Error details: $START_OUTPUT"
            if echo "$START_OUTPUT" | grep -q "HTTP 409"; then
              echo "Conflict detected (HTTP 409). Retrying in 30 seconds..."
              sleep 30
            else
              echo "Non-retryable error. Exiting."
              exit 1
            fi
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          echo "Failed to restart Codespace $CODESPACE_NAME after $MAX_RETRIES attempts."
          exit 1
      - name: Wake Up Codespace
        env:
          CODESPACE_NAME: ${{ github.event.client_payload.codespace_name }}
        run: |
          echo "Waiting 120 seconds for Codespace to stabilize..."
          sleep 120
          echo "Starting SSH agent..."
          eval "$(ssh-agent -s)" || { echo "Failed to start SSH agent"; exit 1; }
          ssh-add ~/.ssh/id_ed25519 || { echo "Failed to add SSH key to agent"; exit 1; }
          echo "Checking SSH agent status..."
          ssh-add -l || echo "No SSH keys loaded in agent."
          echo "Testing SSH connection..."
          gh codespace ssh -c $CODESPACE_NAME -- whoami > ssh_test.log 2>&1 || { echo "Test SSH failed"; cat ssh_test.log; exit 1; }
          echo "Test SSH output:"
          cat ssh_test.log
          echo "Attempting to SSH into Codespace $CODESSPACE_NAME to trigger initialization..."
          RETRY_COUNT=0
          MAX_RETRIES=5
          until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)): Running gh codespace ssh with debug..."
            bash -c "gh codespace ssh -c $CODESPACE_NAME --debug -- whoami > ssh_output.log 2>&1"
            SSH_STATUS=$?
            cat ssh_output.log
            if [ $SSH_STATUS -eq 0 ]; then
              echo "Successfully connected to Codespace $CODESPACE_NAME via SSH."
              break
            fi
            echo "Failed to SSH into Codespace $CODESPACE_NAME (Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)."
            echo "Error details in ssh_output.log"
            echo "Retrying in 30 seconds..."
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          done
          if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
            echo "Warning: Failed to SSH into Codespace $CODESPACE_NAME after $MAX_RETRIES attempts. Port forwarding may not be initialized."
            exit 1
          fi
          echo "Checking Docker daemon..."
          DOCKER_CHECK=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "docker info --format '{{.ServerVersion}}' 2>&1")
          DOCKER_STATUS=$?
          if [ $DOCKER_STATUS -eq 0 ] && ! echo "$DOCKER_CHECK" | grep -q "Usage: docker"; then
            echo "Docker daemon is running. Version: $DOCKER_CHECK"
          else
            echo "Error: Docker daemon is not running or inaccessible."
            echo "Docker info output: $DOCKER_CHECK"
            exit 1
          fi
          echo "Checking start-docker.sh execution..."
          LOG_CHECK=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "cat /workspaces/gofly/start-docker.log 2>&1")
          if echo "$LOG_CHECK" | grep -q "start-docker.sh completed successfully"; then
            echo "start-docker.sh executed successfully."
          else
            echo "Warning: start-docker.sh did not execute or failed."
            echo "Log contents: $LOG_CHECK"
            echo "Attempting to run start-docker.sh manually..."
            RUN_SCRIPT=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "bash /workspaces/gofly/.devcontainer/start-docker.sh 2>&1")
            RUN_STATUS=$?
            echo "Manual execution output: $RUN_SCRIPT"
            if [ $RUN_STATUS -ne 0 ]; then
              echo "Error: Manual execution of start-docker.sh failed."
              exit 1
            fi
            echo "Checking start-docker.sh log after manual execution..."
            LOG_CHECK=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "cat /workspaces/gofly/start-docker.log 2>&1")
            if echo "$LOG_CHECK" | grep -q "start-docker.sh completed successfully"; then
              echo "start-docker.sh executed successfully after manual run."
            else
              echo "Error: start-docker.sh still failed."
              echo "Log contents: $LOG_CHECK"
              exit 1
            fi
          fi
          echo "Checking current port forwarding status..."
          gh codespace ports -c $CODESPACE_NAME > ports.log 2>&1
          cat ports.log
          echo "Ensuring port 6200 visibility..."
          gh codespace ports visibility 6200:public -c $CODESPACE_NAME || { echo "Failed to set port 6200 visibility"; exit 1; }
          echo "Verifying container status..."
          CONTAINER_STATUS=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "docker ps -q -f name=agitated_cannon 2>&1")
          if [ -n "$CONTAINER_STATUS" ]; then
            echo "Container agitated_cannon is running."
          else
            echo "Error: Container agitated_cannon is not running."
            gh codespace ssh -c $CODESPACE_NAME -- sh -c "cat /workspaces/gofly/start-docker.log" > start-docker.log 2>&1
            cat start-docker.log
            exit 1
          fi
          echo "Checking if port 6200 is listening..."
          PORT_RETRY_COUNT=0
          PORT_MAX_RETRIES=5
          until [ $PORT_RETRY_COUNT -ge $PORT_MAX_RETRIES ]; do
            echo "Port check attempt $((PORT_RETRY_COUNT + 1))/$MAX_RETRIES..."
            NC_OUTPUT=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "nc -z localhost 6200 && echo 'Port 6200 is listening' 2>&1")
            NC_STATUS=$?
            echo "Netcat output: $NC_OUTPUT"
            if [ $NC_STATUS -eq 0 ]; then
              echo "Confirmed port 6200 is listening in Codespace $CODESPACE_NAME."
              break
            else
              echo "Netcat failed to confirm port 6200 is listening. Trying alternative method..."
              TCP_OUTPUT=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/6200 && echo Port 6200 is listening' 2>&1")
              TCP_STATUS=$?
              echo "TCP output: $TCP_OUTPUT"
              if [ $TCP_STATUS -eq 0 ]; then
                echo "Confirmed port 6200 is listening via TCP check in Codespace $CODESPACE_NAME."
                break
              else
                echo "Failed to confirm port 6200 is listening via TCP check. Error details: $TCP_OUTPUT"
              fi
            fi
            echo "Retrying port check in 30 seconds..."
            sleep 30
            PORT_RETRY_COUNT=$((PORT_RETRY_COUNT + 1))
          done
          if [ $PORT_RETRY_COUNT -ge $PORT_MAX_RETRIES ]; then
            echo "Error: Port 6200 is not listening in Codespace $CODESPACE_NAME after $PORT_MAX_RETRIES attempts."
            exit 1
          fi
          echo "Verifying VNC accessibility..."
          VNC_OUTPUT=$(gh codespace ssh -c $CODESPACE_NAME -- sh -c "curl -I http://localhost:6200 2>&1")
          VNC_STATUS=$?
          echo "VNC output: $VNC_OUTPUT"
          if [ $VNC_STATUS -eq 0 ] && echo "$VNC_OUTPUT" | grep -q "HTTP/1.1 200 OK"; then
            echo "VNC service is accessible on port 6200 in Codespace $CODESPACE_NAME."
          else
            echo "Error: VNC service is not accessible on port 6200. Error details: $VNC_OUTPUT"
            exit 1
          fi
